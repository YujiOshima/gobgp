// Copyright (C) 2015 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package gobgpapi;

// Interface exported by the server.

service GobgpApi {
  rpc GetNeighbors(Arguments) returns (stream Peer) {}
  rpc GetNeighbor(Arguments) returns (Peer) {}
  rpc ModNeighbor(ModNeighborArguments) returns(Error) {}
  rpc GetRib(Arguments) returns (stream Destination) {}
  rpc Reset(Arguments) returns (Error) {}
  rpc SoftReset(Arguments) returns (Error) {}
  rpc SoftResetIn(Arguments) returns (Error) {}
  rpc SoftResetOut(Arguments) returns (Error) {}
  rpc Shutdown(Arguments) returns (Error) {}
  rpc Enable(Arguments) returns (Error) {}
  rpc Disable(Arguments) returns (Error) {}
  rpc ModPath(stream ModPathArguments) returns (Error) {}
  rpc MonitorBestChanged(Arguments) returns (stream Destination) {}
  rpc MonitorPeerState(Arguments) returns (stream Peer) {}
  rpc GetMrt(MrtArguments) returns (stream MrtMessage) {}
  rpc GetRPKI(Arguments) returns (stream RPKI) {}
  rpc GetROA(Arguments) returns (stream ROA) {}
  rpc GetVrfs(Arguments) returns (stream Vrf) {}
  rpc ModVrf(ModVrfArguments) returns (Error) {}
  rpc GetDefinedSet(DefinedSet) returns (DefinedSet) {}
  rpc GetDefinedSets(DefinedSet) returns (stream DefinedSet) {}
  rpc ModDefinedSet(ModDefinedSetArguments) returns (Error) {}
  rpc GetStatement(Statement) returns (Statement) {}
  rpc GetStatements(Statement) returns (stream Statement) {}
  rpc ModStatement(ModStatementArguments) returns (Error) {}
  rpc GetPolicy(Policy) returns (Policy) {}
  rpc GetPolicies(Policy) returns (stream Policy) {}
  rpc ModPolicy(ModPolicyArguments) returns (Error) {}
  rpc GetPolicyAssignment(PolicyAssignment) returns (PolicyAssignment) {}
  rpc ModPolicyAssignment(ModPolicyAssignmentArguments) returns (Error) {}
}

message Error {
    enum ErrorCode {
        SUCCESS = 0;
        FAIL = 1;
    }
    ErrorCode code = 1;
    string msg = 2;
}

message Arguments {
    Resource resource = 1;
    uint32 rf = 2;
    string name = 3;
}

message ModPathArguments {
    Resource resource = 1;
    string name = 2;
    repeated Path paths = 3;
}

message ModNeighborArguments {
    Operation operation = 1;
    Peer peer = 2;
}
message MrtArguments {
    Resource resource = 1;
    uint32 rf = 2;
    uint64 interval = 3;
    string neighbor_address = 4;
}

message ModVrfArguments {
    Operation operation = 1;
    Vrf vrf = 2;
}

message ModDefinedSetArguments {
    Operation operation = 1;
    DefinedSet set = 2;
}

message ModStatementArguments {
    Operation operation = 1;
    Statement statement = 2;
}

message ModPolicyArguments {
    Operation operation = 1;
    Policy policy = 2;
    // if this flag is set, gobgpd won't define new statements
    // but refer existing statements using statement's names in this arguments.
    // this flag only works with Operation_ADD
    bool refer_existing_statements = 3;
    // if this flag is set, gobgpd won't delete any statements
    // even if some statements get not used by any policy by this operation.
    // this flag means nothing if it is used with Operation_ADD
    bool preserve_statements = 4;
}

message ModPolicyAssignmentArguments {
    Operation operation = 1;
    PolicyAssignment assignment = 2;
}

enum Resource {
    GLOBAL = 0;
    LOCAL = 1;
    ADJ_IN = 2;
    ADJ_OUT = 3;
    VRF = 4;
}

enum Operation {
    ADD = 0;
    DEL = 1;
    DEL_ALL = 2;
    REPLACE = 3;
}

message Path {
    bytes nlri = 1;
    repeated bytes pattrs = 2;
    int64 age = 3;
    bool best = 4;
    bool is_withdraw = 5;
    int32 validation = 6;
    bool no_implicit_withdraw = 7;
    uint32 rf = 8;
    uint32 source_asn = 9;
    string source_id = 10;
    bool filtered = 11;
}

message Destination {
    string prefix = 1;
    repeated Path paths = 2;
}

message Peer {
  AddPaths addPaths = 1;
  AfiSafis afiSafis = 2;
  ApplyPolicy applyPolicy = 3;
  AsPathOptions asPathOptions = 4;
  PeerConf conf = 5;
  EbgpMultihop ebgpMultihop = 6;
  ErrorHandling errorHandling = 7;
  PeerGracefulRestart dracefulRestart = 8;
  LoggingOptions loggingOptions = 9;
  string nighborAddress = 10;
  RouteReflector routeReflector = 11;
  PeerState info = 12;
  Timers timers = 13;
  Transport transport = 14;
  UseMultiplePaths useMultiplePaths = 15;
  RouteServer routeServer = 16;
}

message AddPaths {
  AddPathsConfig config = 1;
  AddPathsState state = 2;
}

message AddPathsConfig {
  bool receive = 1;
  uint32 sendMax = 2;
}

message AddPathsState {
  bool receive = 1;
  uint32 sendMax = 2;
}

message AfiSafis {
  repeated AfiSafi afiSafi = 1;
}

message AfiSafi {
  string afiSafiName = 1;
  ApplyPolicy applyPolicy = 2;
  AfiSafiConfig config = 3;
  AfiSafiGracefulRestart gracefulRestart = 4;
  Ipv4LabelledUnicast ipv4LabelledUnicast = 5;
  Ipv4Unicast ipv4Unicast = 6;
  Ipv6LabelledUnicast ipv6LabelledUnicast = 7;
  Ipv6Unicast ipv6Unicast = 8;
  L2VpnEvpn l2VpnEvpn = 9;
  L2VpnVpls l2VpnVpls = 10;
  L3VpnIpv4Multicast l3VpnIpv4Multicast = 11;
  L3VpnIpv4Unicast l3VpnIpv4Unicast = 12;
  L3VpnIpv6Multicast l3VpnIpv6Multicast = 13;
  L3VpnIpv6Unicast l3VpnIpv6Unicast = 14;
  AfiSafiState state = 15;
  UseMultiplePaths useMultiplePaths = 16;
}

message ApplyPolicy {
  ApplyPolicyConfig config = 1;
  ApplyPolicyState state = 2;
}

message ApplyPolicyConfig {
  uint32 defaultExportPolicy = 1;
  uint32 defaultImportPolicy = 2;
  repeated string exportPolicy = 3;
  repeated string importPolicy = 4;
}

message ApplyPolicyState {
  uint32 defaultExportPolicy = 1;
  uint32 defaultImportPolicy = 2;
  repeated string exportPolicy = 3;
  repeated string importPolicy = 4;
}

message AfiSafiConfig {
  string afiSafiName = 1;
  bool enabled = 2;
}

message AfiSafiGracefulRestart {
  AfiSafiGracefulRestartConfig config = 1;
  AfiSafiGracefulRestartState state = 2;
}

message AfiSafiGracefulRestartConfig {
  bool enabled = 1;
}

message AfiSafiGracefulRestartState {
  bool advertised = 1;
  bool enabled = 2;
  bool received = 3;
}

message Ipv4LabelledUnicast {
  PrefixLimit prefixLimit = 1;
}

message PrefixLimit {
  PrefixLimitConfig config = 1;
  PrefixLimitState state = 2;
}

message PrefixLimitConfig {
  uint32 maxPrefixes = 1;
  uint64 restartTimer = 2;
  uint32 shutdownThresholdPct = 3;
}

message PrefixLimitState {
  uint32 maxPrefixes = 1;
  uint64 restartTimer = 2;
  uint32 shutdownThresholdPct = 3;
}

message Ipv4Unicast {
  Ipv4UnicastConfig config = 1;
  PrefixLimit prefixLimit = 2;
  Ipv4UnicastState state = 3;
}

message Ipv4UnicastConfig {
  bool sendDefaultRoute = 1;
}

message Ipv4UnicastState {
  bool sendDefaultRoute = 1;
}

message Ipv6LabelledUnicast {
  PrefixLimit prefixLimit = 1;
}

message Ipv6Unicast {
  Ipv6UnicastConfig config = 1;
  PrefixLimit prefixLimit = 2;
  Ipv6UnicastState state = 3;
}

message Ipv6UnicastConfig {
  bool sendDefaultRoute = 1;
}

message Ipv6UnicastState {
  bool sendDefaultRoute = 1;
}

message L2VpnEvpn {
  PrefixLimit prefixLimit = 1;
}

message L2VpnVpls {
  PrefixLimit prefixLimit = 1;
}

message L3VpnIpv4Multicast {
  PrefixLimit prefixLimit = 1;
}

message L3VpnIpv4Unicast {
  PrefixLimit prefixLimit = 1;
}

message L3VpnIpv6Multicast {
  PrefixLimit prefixLimit = 1;
}

message L3VpnIpv6Unicast {
  PrefixLimit prefixLimit = 1;
}

message AfiSafiState {
  bool active = 1;
  string afiSafiName = 2;
  bool enabled = 3;
  Prefixes prefixes = 4;
}

message Prefixes {
  uint32 installed = 1;
  uint32 received = 2;
  uint32 sent = 3;
}

message UseMultiplePaths {
  UseMultiplePathsConfig config = 1;
  Ebgp ebgp = 2;
  UseMultiplePathsState state = 3;
}

message UseMultiplePathsConfig {
  bool enabled = 1;
}

message Ebgp {
  EbgpConfig config = 1;
  EbgpState state = 2;
}

message EbgpConfig {
  bool allowMultipleAs = 1;
}

message EbgpState {
  bool allowMultipleAs = 1;
}

message UseMultiplePathsState {
  bool enabled = 1;
}

message AsPathOptions {
  AsPathOptionsConfig config = 1;
  AsPathOptionsState state = 2;
}

message AsPathOptionsConfig {
  uint32 allowOwnAs = 1;
  bool replacePeerAs = 2;
}

message AsPathOptionsState {
  uint32 allowOwnAs = 1;
  bool replacePeerAs = 2;
}

message PeerConf {
  string authPassword = 1;
  string description = 2;
  uint32 localAs = 3;
  string neighborAddress = 4;
  uint32 peerAs = 5;
  string peerGroup = 6;
  uint32 peerType = 7;
  uint32 removePrivateAs = 8;
  bool routeFlapDamping = 9;
  uint32 sendCommunity = 10;
  repeated bytes remote_cap = 11;
  repeated bytes local_cap = 12;
}

message EbgpMultihop {
  EbgpMultihopConfig config = 1;
  EbgpMultihopState state = 2;
}

message EbgpMultihopConfig {
  bool enabled = 1;
  uint32 multihopTtl = 2;
}

message EbgpMultihopState {
  bool enabled = 1;
  uint32 multihopTtl = 2;
}

message ErrorHandling {
  ErrorHandlingConfig config = 1;
  ErrorHandlingState state = 2;
}

message ErrorHandlingConfig {
  bool treatAsWithdraw = 1;
}

message ErrorHandlingState {
  uint32 ErroneousUpdateMessages = 1;
  bool treatAsWithdraw = 2;
}

message PeerGracefulRestart {
  PeerGracefulRestartConfig config = 1;
  PeerGracefulRestartState state = 2;
}

message PeerGracefulRestartConfig {
  bool enabled = 1;
  bool helperOnly = 2;
  uint32 restartTime = 3;
  uint64 staleRoutesTime = 4;
}

message PeerGracefulRestartState {
  bool enabled = 1;
  bool helperOnly = 2;
  bool localRestarting = 3;
  uint32 mode = 4;
  uint32 peerRestartTime = 5;
  bool peerRestarting = 6;
  uint32 restartTime = 7;
  uint64 staleRoutesTime = 8;
}

message LoggingOptions {
  LoggingOptionsConfig config = 1;
  LoggingOptionsState state = 2;
}

message LoggingOptionsConfig {
  bool logNeighborStateChanges = 1;
}

message LoggingOptionsState {
  bool logNeighborStateChanges = 1;
}

message RouteReflector {
  RouteReflectorConfig config = 1;
  RouteReflectorState state = 2;
}

message RouteReflectorConfig {
  bool routeReflectorClient = 1;
  uint32 routeReflectorClusterId = 2;
}

message RouteReflectorState {
  bool routeReflectorClient = 1;
  uint32 routeReflectorClusterId = 2;
}

message PeerState {
  string authPassword = 1;
  string description = 2;
  uint32 localAs = 3;
  Messages messages = 4;
  string neighborAddress = 5;
  uint32 peerAs = 6;
  string peerGroup = 7;
  uint32 peerType = 8;
  Queues queues = 9;
  uint32 removePrivateAs = 10;
  bool routeFlapDamping = 11;
  uint32 sendCommunity = 12;
  uint32 sessionState = 13;
  repeated string supportedCapabilities = 14;
  string bgp_state = 15;
  string admin_state = 16;
  uint32 received = 17;
  uint32 accepted = 18;
  uint32 advertized = 19;
  uint32 out_q = 20;
  uint32 flops = 21;
}

message Messages {
  Received received = 1;
  Sent sent = 2;
}

message Received {
  uint64 NOTIFICATION = 1;
  uint64 UPDATE = 2;
  uint64 OPEN = 3;
  uint64 KEEPALIVE = 4;
  uint64 REFRESH = 5;
  uint64 DISCARDED = 6;
  uint64 TOTAL = 7;
}

message Sent {
  uint64 NOTIFICATION = 1;
  uint64 UPDATE = 2;
  uint64 OPEN = 3;
  uint64 KEEPALIVE = 4;
  uint64 REFRESH = 5;
  uint64 DISCARDED = 6;
  uint64 TOTAL = 7;
}

message Queues {
  uint32 input = 1;
  uint32 output = 2;
}

message Timers {
  TimersConfig config = 1;
  TimersState state = 2;
}

message TimersConfig {
  uint64 connectRetry = 1;
  uint64 holdTime = 2;
  uint64 keepaliveInterval = 3;
  uint64 minimumAdvertisementInterval = 4;
}

message TimersState {
  uint64 connectRetry = 1;
  uint64 holdTime = 2;
  uint64 keepaliveInterval = 3;
  uint64 minimumAdvertisementInterval = 4;
  uint64 negotiatedHoldTime = 5;
  uint64 uptime = 6;
  uint64 downtime = 7;
}

message Transport {
  TransportConfig config = 1;
  TransportState state = 2;
}

message TransportConfig {
  string localAddress = 1;
  bool mtuDiscovery = 2;
  bool passiveMode = 3;
  uint32 tcpMss = 4;
}

message TransportState {
  string localAddress = 1;
  uint32 localPort = 2;
  bool mtuDiscovery = 3;
  bool passiveMode = 4;
  string remoteAddress = 5;
  uint32 remotePort = 6;
  uint32 tcpMss = 7;
}

message RouteServer {
  bool routeServerClient = 1;
}

message Prefix {
    string ip_prefix  = 1;
    uint32 mask_length_min = 2;
    uint32 mask_length_max = 3;
}

enum DefinedType {
    PREFIX = 0;
    NEIGHBOR = 1;
    TAG = 2;
    AS_PATH = 3;
    COMMUNITY = 4;
    EXT_COMMUNITY = 5;
}

message DefinedSet {
    DefinedType type = 1;
    string name = 2;
    repeated string list = 3;
    repeated Prefix prefixes = 4;
}

enum MatchType {
    ANY = 0;
    ALL = 1;
    INVERT = 2;
}

message MatchSet {
    MatchType type = 1;
    string name = 2;
}

enum AsPathLengthType {
    EQ = 0;
    GE = 1;
    LE = 2;
}

message AsPathLength {
    AsPathLengthType type = 1;
    uint32 length = 2;
}

message Conditions {
    MatchSet prefix_set = 1;
    MatchSet neighbor_set = 2;
    AsPathLength as_path_length = 3;
    MatchSet as_path_set = 4;
    MatchSet community_set = 5;
    MatchSet ext_community_set = 6;
    int32 rpki_result = 7;
}

enum RouteAction {
    NONE = 0;
    ACCEPT = 1;
    REJECT = 2;
}

enum CommunityActionType {
    COMMUNITY_ADD = 0;
    COMMUNITY_REMOVE = 1;
    COMMUNITY_REPLACE = 2;
}

message CommunityAction {
    CommunityActionType type = 1;
    repeated string communities = 2;
}

enum MedActionType {
    MED_MOD = 0;
    MED_REPLACE = 1;
}

message MedAction {
    MedActionType type = 1;
    int64 value = 2;
}

message AsPrependAction {
    uint32 asn = 1;
    uint32 repeat = 2;
    bool use_left_most = 3;
}

message Actions {
    RouteAction route_action = 1;
    CommunityAction community = 2;
    MedAction med = 3;
    AsPrependAction as_prepend = 4;
    CommunityAction ext_community = 5;
}

message Statement {
    string name = 1;
    Conditions conditions = 2;
    Actions actions = 3;
}

message Policy {
    string name = 1;
    repeated Statement statements = 2;
}

enum PolicyType {
    IN = 0;
    IMPORT = 1;
    EXPORT = 2;
}

message PolicyAssignment {
    PolicyType type = 1;
    Resource resource = 2;
    string name = 3;
    repeated Policy policies = 4;
    RouteAction default = 5;
}

message MrtMessage {
    bytes data = 1;
}

message RPKIConf {
    string address = 1;
}

message RPKIState {
    int64 uptime = 1;
    int64 downtime = 2;
    int32 received_ipv4 = 3;
    int32 received_ipv6 = 4;
}

message RPKI {
    RPKIConf conf = 1;
    RPKIState state = 2;
}

message ROA {
    uint32 as = 1;
    uint32 prefixlen = 2;
    uint32 maxlen = 3;
    string prefix = 4;
}

message Vrf {
    string name = 1;
    bytes rd = 2;
    repeated bytes import_rt = 3;
    repeated bytes export_rt = 4;
}
